{"version":3,"sources":["images/movie-logo.jpg","components/Movie.js","components/Popular.js","components/TheatersToday.js","components/Discover.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movie","movie","poster_path","overview","title","vote_average","id","release_date","image_url","className","src","alt","target","onClick","_","url","window","open","Popular","fetchMovies","useEffect","TheatersToday","date","Date","monthAgo","getMonth","month","day","getDate","toString","year","getFullYear","length","Discover","handleSearchChange","debounce","type","onChange","e","value","placeholder","Nav","to","exact","mainLogo","activeStyle","color","MovieApp","useState","movies","setMovies","typeOfQuery","query","a","fetch","json","data","results","path","render","props","map","index","key","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59cdab66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/movie-logo.9ba7940a.jpg\";","import React from 'react';\n\nconst Movie = ({movie}) => {\n  const {poster_path, overview, title, vote_average, id, release_date} = movie;\n  const image_url = 'https://image.tmdb.org/t/p/w185' + poster_path;\n  const handleViewClick = _ => {\n    const url = 'https://www.themoviedb.org/movie/' + id;\n    window.open(url, '_blank');\n  }\n\n  return (\n    <div className=\"movie-row\">\n      <div className=\"movie-img-container\">\n        <img src={image_url} alt={title} />\n      </div>\n      <div className=\"movie-info-container\">\n        <h2>{title}</h2>\n        <div className=\"synopsis-overview\">{overview}</div>\n        <div className=\"movie-data-container\">\n          <span className=\"released-date pill\">Released:</span> <span className=\"data\">{release_date}</span>\n          <span className=\"vote-average pill\">Average rating:</span> <span className=\"data\">{vote_average}</span>\n          <button className=\"view-btn btn\" target=\"_blank\" onClick={handleViewClick}>View</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Movie;\n","import React, {useEffect} from 'react';\n\nconst Popular = ({fetchMovies}) => {\n  useEffect( () => {\n    let query= '&primary_release_year=2019&sort_by=vote_average.desc';\n    fetchMovies('discover',query);\n  }, []);\n  return (\n    <div className=\"title-container\">\n      <h2>Popular</h2>\n      <p>These are movies that have been released this year that have received the highest average rating</p>\n    </div>\n  )\n}\n\nexport default Popular;\n","import React, {useEffect} from 'react';\n\nconst TheatersToday = ({fetchMovies}) => {\n\n  useEffect( () => {\n    let date = new Date(),\n        monthAgo = date.getMonth(),\n        month = date.getMonth() + 1,\n        day = date.getDate().toString(),\n        year = date.getFullYear();\n    month = month.length > 1 ? month.toString() : '0'+ month;\n    if(monthAgo === 0) {\n      monthAgo = '12';\n      year = year - 1;\n    } else {\n      monthAgo = monthAgo.toString().length > 1 ? monthAgo.toString() : '0'+ monthAgo;\n    }\n    let todaysDate = year + '-' + month + '-' + day;\n    let monthAgoDate = year + '-' + monthAgo + '-' + day;\n    let query= '&primary_release_date.gte=' + monthAgoDate + '&primary_release_date.lte=' + todaysDate;\n    fetchMovies('discover',query);\n  }, []);\n  return (\n    <div className=\"title-container\">\n      <h2>In theaters today</h2>\n      <p>These are the movies that have been released in the last month!</p>\n    </div>\n  )\n}\n\nexport default TheatersToday;\n","import React, {useEffect} from 'react';\nimport {debounce} from 'lodash';\n\nconst Discover = ({fetchMovies}) => {\n  useEffect( () => {\n    let query= '&primary_release_date.gte=2014-09-15&primary_release_date.lte=2019-08-22';\n    fetchMovies('discover',query);\n  },[]);\n  const handleSearchChange = debounce((movie) => {\n    fetchMovies('search', movie);\n  }, 400);\n\n\n  return (\n    <div className=\"title-container\">\n      <h2>Browse</h2>\n      <input type=\"text\" onChange={(e) => handleSearchChange(e.target.value)} className=\"searchbox\" placeholder=\"Which movie are you looking for?\" />\n\n    </div>\n  )\n}\n\nexport default Discover;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport mainLogo from '../images/movie-logo.jpg';\nconst Nav = _ => {\n  return (\n    <nav>\n      <NavLink to=\"/\" exact>\n        <img src={mainLogo} alt=\"movie logo\"/>\n      </NavLink>\n      <div className=\"nav-links-container\">\n        <NavLink to=\"/\" exact activeStyle={{color: 'orange'}}>\n          <span className=\"nav-link\">Browse</span>\n        </NavLink>\n        <NavLink to=\"/theaters-today\" activeStyle={{color: 'orange'}}>\n          <span className=\"nav-link\">In theaters today</span>\n        </NavLink>\n        <NavLink to=\"/popular\" activeStyle={{color: 'orange'}}>\n          <span className=\"nav-link\">Popular Movies</span>\n        </NavLink>\n      </div>\n    </nav>\n  )\n}\n\nexport default Nav;\n","import React, {useState} from 'react';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Movie from './components/Movie';\nimport Popular from './components/Popular';\nimport TheatersToday from './components/TheatersToday';\nimport Discover from './components/Discover';\nimport Nav from './components/Nav';\nimport './App.css';\n\nconst MovieApp = _ => {\n  const [movies, setMovies] = useState([]);\n  async function fetchMovies(typeOfQuery,query) {\n    const url = await fetch('https://api.themoviedb.org/3/' + typeOfQuery + '/movie?api_key=2b0d7ae1b2d446dcbb6954fabb182f1e&query=' + query);\n    const data = await url.json();\n    setMovies(data.results)\n  }\n\n\n  return (\n    <Router>\n      <div className=\"movie-container\">\n        <Nav />\n        <Route\n          path=\"/\"\n          exact\n          render={(props) => <Discover fetchMovies={fetchMovies}/>}\n        />\n        <Route\n          path=\"/theaters-today\"\n          exact\n          render={(props) => <TheatersToday fetchMovies={fetchMovies}/>}\n        />\n        <Route\n          path=\"/popular\"\n          exact\n          render={(props)=> <Popular fetchMovies={fetchMovies}/>}\n        />\n        {movies && movies.map((movie, index) => {\n          return <Movie key={index} movie={movie}/>\n        })}\n      </div>\n    </Router>\n  )\n}\n\nexport default MovieApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MovieApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MovieApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}